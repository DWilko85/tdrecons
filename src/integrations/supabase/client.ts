
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://nxcjkpnhlcrwaxarlxyj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im54Y2prcG5obGNyd2F4YXJseHlqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI4MzQ5MzAsImV4cCI6MjA1ODQxMDkzMH0.39MmELjeIwCaDjNIs-O2xQk1BmzAKAaB5bsRx9CVTY8";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Initialize the data_sources table if it doesn't exist
export async function initializeDataSourcesTable() {
  try {
    // Call the initialization function using raw SQL instead of RPC
    const { error } = await supabase.from('data_sources').select('count').limit(1);
    
    if (error && error.code === 'PGRST116') {
      console.error("Error with data_sources table:", error);
      
      // Use raw SQL query to call the function
      const { error: sqlError } = await supabase.rpc('initialize_data_sources_table' as any);
      
      if (sqlError) {
        console.error("Failed to initialize data_sources table:", sqlError);
        
        // Try the alternate function
        const { error: altError } = await supabase.rpc('create_data_sources_table' as any);
        
        if (altError) {
          console.error("Failed to create data_sources table:", altError);
        } else {
          console.log("Data sources table created successfully");
        }
      } else {
        console.log("Data sources table initialized successfully");
      }
    } else {
      console.log("Data sources table already exists");
    }
  } catch (err) {
    console.error("Unexpected error initializing data sources table:", err);
  }
}

// Call the initialization function
initializeDataSourcesTable();
